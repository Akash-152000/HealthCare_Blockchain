{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\sony\\\\Desktop\\\\rohit\\\\decentragram-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\sony\\\\Desktop\\\\rohit\\\\decentragram-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\sony\\\\Desktop\\\\rohit\\\\decentragram-master\\\\src\\\\components\\\\App.js\";\nimport Decentragram from '../abis/Decentragram.json';\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Home from './Home';\nimport Web3 from 'web3';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Doctor from './Doctor'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, decentragram, imagesCount, i, image;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; // Load account\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n\n              _this2.setState({\n                account: accounts[0]\n              }); // Network ID\n\n\n              _context3.next = 7;\n              return web3.eth.net.getId();\n\n            case 7:\n              networkId = _context3.sent;\n              networkData = Decentragram.networks[networkId];\n\n              if (accounts[0] == \"0x89fae8e8a7e50Dc5abcebF9f6e26635061CefAC4\") {\n                console.log(\"accounts\", _this2.state.account);\n              } else {\n                console.log(\"Phewww\");\n              }\n\n              if (!networkData) {\n                _context3.next = 30;\n                break;\n              }\n\n              decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address);\n\n              _this2.setState({\n                decentragram\n              });\n\n              _context3.next = 15;\n              return decentragram.methods.imageCount().call();\n\n            case 15:\n              imagesCount = _context3.sent;\n\n              _this2.setState({\n                imagesCount\n              }); // Load images\n\n\n              i = 1;\n\n            case 18:\n              if (!(i <= imagesCount)) {\n                _context3.next = 26;\n                break;\n              }\n\n              _context3.next = 21;\n              return decentragram.methods.images(i).call();\n\n            case 21:\n              image = _context3.sent;\n\n              _this2.setState({\n                images: [..._this2.state.images, image]\n              });\n\n            case 23:\n              i++;\n              _context3.next = 18;\n              break;\n\n            case 26:\n              // Sort images. Show highest tipped images first\n              _this2.setState({\n                images: _this2.state.images.sort((a, b) => b.tipAmount - a.tipAmount)\n              });\n\n              _this2.setState({\n                loading: false\n              });\n\n              _context3.next = 31;\n              break;\n\n            case 30:\n              window.alert('Decentragram contract not deployed to detected network.');\n\n            case 31:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({\n      loading: true\n    });\n    this.state.decentragram.methods.tipImageOwner(id).send({\n      from: this.state.account,\n      value: tipAmount\n    }).on('transactionHash', hash => {\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadImage = description => {\n      console.log(\"Submitting file to ipfs...\"); //adding file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        console.log('Ipfs result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.decentragram.methods.uploadImage(result[0].hash, description).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true,\n      currentDateTime: Date().toLocaleString()\n    };\n    this.uploadImage = this.uploadImage.bind(this);\n    this.tipImageOwner = this.tipImageOwner.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/Main\",\n      exact: true,\n      render: props => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Main, {\n        account: this.state.account,\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        tipImageOwner: this.tipImageOwner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/Home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/Doctor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Doctor, {\n      images: this.state.images,\n      account: this.state.account,\n      date: this.state.currentDateTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 33\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/sony/Desktop/rohit/decentragram-master/src/components/App.js"],"names":["Decentragram","React","Component","Navbar","Main","Home","Web3","BrowserRouter","Router","Route","Doctor","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","console","log","state","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","sort","a","b","tipAmount","loading","tipImageOwner","id","send","from","value","on","hash","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","uploadImage","description","add","error","currentDateTime","Date","toLocaleString","bind","render"],"mappings":"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","sourcesContent":["import Decentragram from '../abis/Decentragram.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Home from './Home'\nimport Web3 from 'web3';\nimport './App.css';\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\nimport Doctor from './Doctor'\n\n\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Decentragram.networks[networkId]\n\n    if(accounts[0]==\"0x89fae8e8a7e50Dc5abcebF9f6e26635061CefAC4\"){\n      console.log(\"accounts\",this.state.account)\n    }\n    else{\n      console.log(\"Phewww\")\n    }\n\n    if(networkData) {\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram })\n      const imagesCount = await decentragram.methods.imageCount().call()\n      this.setState({ imagesCount })\n      // Load images\n      for (var i = 1; i <= imagesCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n      // Sort images. Show highest tipped images first\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('Decentragram contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true,\n      currentDateTime: Date().toLocaleString()\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n      <Navbar account={this.state.account}/>      \n        <Router>\n        \n          <Route path = \"/Main\" exact render = {(props) =>(\n            <>\n              <Main\n                account={this.state.account} \n                images={this.state.images}\n                captureFile={this.captureFile}\n                uploadImage={this.uploadImage}\n                tipImageOwner={this.tipImageOwner}/>\n            </>\n          )} />\n          <Route path='/Home'><Home/></Route>\n          <Route path='/Doctor'><Doctor images={this.state.images} account={this.state.account} date={ this.state.currentDateTime }/></Route>\n        </Router>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}